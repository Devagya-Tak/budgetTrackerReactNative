import { View, Text, Button, TextInput, Pressable, StyleSheet, Alert, Image } from 'react-native';
import React, { useState } from 'react';
import { Stack } from 'expo-router';
import { supabase } from '@/client';
import * as ImagePicker from 'react-native-image-picker';

const AddCategory = () => {
  const [title, setTitle] = useState<string>('');
  const [limit, setLimit] = useState<string>('');
  const [imageUri, setImageUri] = useState<string | null>(null);

  const postCategories = async (image_url: string) => {
    const { data: { user } } = await supabase.auth.getUser();
    const floatLimit = parseFloat(limit);
    if (!isNaN(floatLimit)) {
      if (!user) {
        Alert.alert('Error', 'User not authenticated');
        return;
      }

      const { error } = await supabase
        .from('category')
        .insert({ title, limit: floatLimit, user: user.id, image_url });

      if (error?.message) {
        console.error('Error inserting data:', error);
        Alert.alert('Error', 'There was an error saving your data.');
      } else {
        Alert.alert('Success', 'Your category has been added.');
      }
    } else {
      console.log('Invalid number:', limit);
      Alert.alert('Error', 'Please enter a valid number.');
    }
  };

  const uploadImage = async (file: any) => {
    const { data, error } = await supabase.storage
      .from('category-images')
      .upload(`public/${file.fileName}`, { uri: file.uri, type: file.type, name: file.fileName });

    if (error) {
      console.log('Error uploading image:', error);
      Alert.alert('Error', 'There was an error uploading the image.');
      return null;
    }

    const { publicURL, error: urlError } = supabase.storage
      .from('category-images')
      .getPublicUrl(`public/${file.fileName}`);

    if (urlError) {
      console.log('Error getting public URL:', urlError);
      Alert.alert('Error', 'There was an error getting the image URL.');
      return null;
    }

    return publicURL;
  };

  const pickImage = () => {
    ImagePicker.launchImageLibrary({ mediaType: 'photo' }, async (response) => {
      if (response.assets && response.assets.length > 0) {
        const file = response.assets[0];
        const publicUrl = await uploadImage(file);
        if (publicUrl) {
          setImageUri(publicUrl);
          await postCategories(publicUrl);
        }
      }
    });
  };

  const handleLimitChange = (text: string) => {
    const numericValue = text.replace(/[^0-9.]/g, '');
    setLimit(numericValue);
  };

  return (
    <View style={styles.container}>
      <Stack.Screen
        options={{
          title: 'Add a category',
          headerRight: () => <Button title="Do Something" color={'black'} onPress={() => { }} />
        }}
      />
      <Text style={styles.heading}>Add a category</Text>
      <TextInput
        style={styles.input}
        value={title}
        onChangeText={setTitle}
        placeholder="Enter your title"
      />
      <TextInput
        style={styles.input}
        keyboardType="decimal-pad"
        value={limit}
        onChangeText={handleLimitChange}
        placeholder="Enter your limit"
      />
      <Button title="Pick an image" onPress={pickImage} />
      {imageUri && <Image source={{ uri: imageUri }} style={{ width: 200, height: 200 }} />}
      <Pressable style={styles.button} onPress={pickImage}>
        <Text style={styles.buttonText}>Add</Text>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff',
    justifyContent: 'center',
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 24,
  },
  input: {
    borderColor: '#DDD',
    borderWidth: 1,
    paddingHorizontal: 8,
    paddingVertical: 10,
    marginBottom: 16,
    borderRadius: 4,
  },
  button: {
    backgroundColor: 'black',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 4,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default AddCategory;



import { View, Text, Button, TextInput, Pressable, StyleSheet, Alert } from 'react-native';
import React, { useEffect, useState } from 'react';
import { Stack } from 'expo-router';
import { supabase } from '@/client';
import * as ImagePicker from 'react-native-image-picker';

const AddCategory = () => {
  const [title, setTitle] = useState<string>('');
  const [limit, setLimit] = useState<string>('');
  const [imageUri, setImageUri] = useState<string | null>(null)



  const postCategories = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    const floatLimit = parseFloat(limit);
    if (!isNaN(floatLimit)) {
      // Save floatLimit to your Supabase database
      console.log('Saving to database:', floatLimit);
      if (!user) {
        Alert.alert('Error', 'User not authenticated');
        return;
      }

      const { error } = await supabase
        .from('category')
        .insert({ title, limit: floatLimit, user: user.id });

      if (error?.message) {
        console.error('Error inserting data:', error);
        Alert.alert('Error', 'There was an error saving your data.');
      } else {
        Alert.alert('Success', 'Your category has been added.');
      }
    } else {
      // Handle the error (e.g., show a message to the user)
      console.log('Invalid number:', limit);
      Alert.alert('Error', 'Please enter a valid number.');
    }
  };

  const uploadImage = async (file : any) => { 
    return file;
   }

  const pickImage = () => { 
    ImagePicker.launchImageLibrary({mediaType: 'photo'}, async (response) => { 
      if (response.assets && response.assets.length > 0) {
        const file = response.assets[0]
        const publicUrl = await uploadImage(file);
        if (publicUrl) {
          setImageUri(publicUrl);
          postCategories();
        }
      }
     })
   }

  const handleLimitChange = (text: string) => {
    const numericValue = text.replace(/[^0-9.]/g, '');
    setLimit(numericValue);
  };

  return (
    <View style={styles.container}>
      <Stack.Screen
        options={{
          title: 'Add a category',
          headerRight: () => <Button title="Do Something" color={'black'} onPress={() => { }} />
        }}
      />
      <Text style={styles.heading}>Add a category</Text>
      <TextInput
        style={styles.input}
        value={title}
        onChangeText={setTitle}
        placeholder="Enter your title"
      />
      <TextInput
        style={styles.input}
        keyboardType="decimal-pad"
        value={limit}
        onChangeText={handleLimitChange}
        placeholder="Enter your limit"
      />
       <Button title="Pick an image" onPress={pickImage} />
      <Pressable style={styles.button} onPress={postCategories}>
        <Text style={styles.buttonText}>Add</Text>
      </Pressable>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: '#fff',
    display: 'flex',
    justifyContent: 'center',
    // alignItems:  'center'
  },
  heading: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 24,
  },
  input: {
    // height: 40,
    borderColor: '#DDD',
    borderWidth: 1,
    paddingHorizontal: 8,
    paddingVertical: 10,
    marginBottom: 16,
    borderRadius: 4,
  },
  button: {
    backgroundColor: 'black',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 4,
    alignItems: 'center',
  },
  buttonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default AddCategory;
